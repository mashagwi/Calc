#include "s21_smartcalc.h"

#test normal1
  char input[]="cos(6*3)/5";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 0.1320633, EPSILON);

#test normal
  char input[]="4*- 1";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, -4, EPSILON);

#test normal2
  char input[]="14mod3^sin(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 1);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 1.39758733594, EPSILON);

#test normal3
  char input[]="14mod3/sin(2x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 2);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, -2.64269741762, EPSILON);

#test normal4
  char input[]="(14mod3^sin(x))";
  double result = 0;
  int response = s21_smartcalc(&result, input, 1);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 1.39758733594, EPSILON);

#test normal5
  char input[]="2+(-(-(-(-1))))";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 3, EPSILON);

#test normal6
  char input[]="sqrt(cos(sin(2+9*6^1.2-tg(x))))mod0.1";
  double result = 0;
  int response = s21_smartcalc(&result, input, 1);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 0.0615000, EPSILON);

#test normal61
  char input[]="-5.0mod(-3.0)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, -2, EPSILON);

#test normal8
  char input[]="cos(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 1.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, -0.0291995223, EPSILON);

#test normal9
  char input[]="asin(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 0.643501109, EPSILON);

#test normal10
  char input[]="acos(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 0.927295218, EPSILON);

#test normal11
  char input[]="atg(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 0.5404195, EPSILON);


#test normal13
  char input[]="sqrt(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 0.77459666924, EPSILON);

#test normal14
  char input[]="ln(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, -0.51082562376 , EPSILON);

#test normal15
  char input[]="log(x)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, -0.22184874961, EPSILON);

#test normal51
  char input[]="1+2+(3*4)+(5.1+6.8)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 26.9, EPSILON);

#test normal16
  char input[]="305+436";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0.6);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 741, EPSILON);

#test normal17
  char input[]="1/2";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, OK);
  ck_assert_double_eq_tol(result, 0.5, EPSILON);


#test incorrect1
  char input[]="---+cos(1)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, IncorrectExp);

  #test incorrect2
  char input[]="tg2)";
  double result = 0;
  int response = s21_smartcalc(&result, input, 0);
  ck_assert_int_eq(response, IncorrectExp);

